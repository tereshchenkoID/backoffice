---
title: Backofice
lang: en
---
extends layouts/_layout

block content
  main.main
    .paper.paper--wide.u-mb-24
      .paper__headline
        h5(data-lang="accounts_search")

      hr.paper__hr
      .paper__body
        form.paper__form.js-form-accounts
          .paper__row.paper__row--3
            .dropdown.dropdown--lg.js-dropdown.js-select-agent
              .dropdown__label Agent
              .dropdown__selected(data-value='0').js-dropdown-selected
                span All
                .dropdown__icon.js-dropdown-icon
              .dropdown__list.js-dropdown-list
                a.dropdown__link.dropdown__link--active(data-value='0').js-dropdown-link All
            +select('form_locked', [])(name="locked").js-select-locked
            +select('form_currency', [])(name="currency").js-select-currency
          .paper__block.u-text-right
            +button('search')(type="submit").button--primary
            +button('cancel')(type="reset").button--default.u-ml-16

    .paper.paper--wide
      .paper__body
        .paper__form.js-form-tables
          .table.table--accounts.js-table.js-table-accounts

block script
  script.
    loader()

    let config = [
      {
        actions: 'dropdown',
      },
      {
        key: 'id',
      },
      {
        key: 'shops',
      },
      {
        key: 'subclients',
      },
      {
        key: 'username',
        text: 'accounts_table_1'
      },
      {
        key: 'full_name',
        text: 'accounts_table_2'
      },
      {
        key: 'credits',
        text: 'accounts_table_3',
        dropdown: 2
      },
      {
        key: 'commission',
        text: 'accounts_table_4',
        dropdown: 2
      },
      {
        key: 'currency',
        text: 'accounts_table_5'
      },
      {
        key: 'locked',
        text: 'accounts_table_6'
      },
      {
        actions: 'edit,add,password,transfer'
      }
    ]

    let config_2 = [
      {
        actions: 'dropdown',
      },
      {
        key: 'id',
      },
      {
        key: 'shops',
      },
      {
        key: 'username',
        text: 'accounts_table_1'
      },
      {
        text: null
      },
      {
        text: null
      },
      {
        text: null
      },
      {
        text: null
      },
      {
        text: null
      },
      {
        actions: 'add'
      }
    ]

    base.initDynamicSelect(
      'settings/',
      [
        {
          element: $('.js-select-locked'),
          name: 'locked'
        },
        {
          element: $('.js-select-currency'),
          name: 'currencies',
          key: true
        }
      ]
    )

    base.initAgents(
      () => {
        base.drawAgents(base.agents, $('.js-select-agent .js-dropdown-list'))
        base.sendFormData(
          null,
          `${base.base}${SETTINGS.API.accounts}`,
          'POST',
          (response) => {
            if (response) {
              table.drawHTML($('.js-table-accounts'), config, response.data)
              base.updateLanguage(window.language, document.querySelector('.js-table-accounts'))
              loader()
            }
          },
          null,
          {
            async: false
          },
          true
        )
      }
    )

    const handleSubmit = () => {
      const formData = new FormData();
    }

    const drawTables = (data, $row, $line, shops) => {
      const $overflow = $(`<div class="table__overflow">`)
      const $shops = $row.find('[data-cell="shops"]').html()
      $overflow.append(`<div class="table table--accounts js-table js-table-accounts" data-idx="0"></div>`)

      if (shops) {
        $overflow.find(`.js-table-accounts[data-idx="0"]`).append(
          table.drawHTML(
            null,
            config_2,
            [
              {
                'id': '-1',
                'username': `SHOPS (${$shops})`,
                'shops': $shops,
              }
            ],
            null,
            false
          )
        )
      }

      $overflow.find(`.js-table-accounts[data-idx="0"]`).append(
        table.drawHTML(
          null,
          config,
          data,
          null,
          false
        )
      )

      $line.append($overflow)
      $line.insertAfter($row)
      base.updateLanguage(window.language, document.querySelector(`[data-dropdown="${data.id}"]`))
    }

    const getClients = ($id, $row) => {
      const formData = new FormData();
      base.sendFormData(
        formData,
        `${base.base}${SETTINGS.API.accounts}?id=${$id}`,
        'POST',
        (response) => {
          if (response) {
            const $line = $(`<div class="table__row table__row--wide table__row--primary-alpha-01 js-table-row" data-dropdown="${$id}">`)
            drawTables(response.data, $row, $line, true)

            $line.find('.js-table-row').map(function(index, item) {
              const $id = $(item).find('[data-cell="id"]').html()
              const $subclient = $(item).find('[data-cell="subclients"]').html()
              const $shop = $(item).find('[data-cell="shops"]').html()

              if ($subclient === '0' && $shop === '0') {
                $(item).find('.js-action[data-type="dropdown"]').hide()
              }

              if ($shop === '0' && $id === '-1') {
                $(item).find('.js-action[data-type="dropdown"]').hide()
              }
            })
          }
        },
        null,
        {
          async: false
        },
        true
      )
    }

    const getShops = ($id, $row) => {
      const formData = new FormData();
      base.sendFormData(
        formData,
        `${base.base}${SETTINGS.API.shops}?id=${$id}`,
        'POST',
        (response) => {
          if (response) {
            const $line = $(`<div class="table__row table__row--wide table__row--primary-alpha-01 js-table-row" data-dropdown="${$id}">`)
            drawTables(response.data, $row, $line, false)

            $line.find('.js-action[data-type="dropdown"]').hide()
            $line.find('.js-action[data-type="add"]').hide()
          }
        },
        null,
        {
          async: false
        },
        true
      )
    }

    $('body').on('click', '.js-action', function () {
      const $parent = $(this).parent()
      const $type = $(this).attr('data-type')
      const $row = $(this).closest('.js-table-row')
      const $id = $parent.next('[data-cell="id"]').text()

      if ($type === SETTINGS.TICKET_ACTIONS.DROPDOWN) {
        $(this).toggleClass('action--active')
        $row.toggleClass('table__row--primary-alpha-05')

        if ($(this).hasClass('action--active')) {
          if ($row.next('[data-dropdown]').length) {
            $row.next('[data-dropdown]').show()
          }
          else {
            if ($row.find('[data-cell="id"]').html() === '-1') {
              getShops($parent.closest('[data-dropdown]').attr('data-dropdown'), $row)
            }
            else if($row.find('[data-cell="subclients"]').html() === '0') {
              getShops($row.find('[data-cell="id"]').html(), $row)
            }
            else {
              getClients($id, $row)
            }
          }
        } else {
          $row.next('[data-dropdown]').hide()
        }
      }
      else if ($type === SETTINGS.TICKET_ACTIONS.PASSWORD) {
        forms.setHTML({
          id: $row.find('[data-cell="id"]').html(),
          title: window.language.change_the_password,
          fields: {
            login: {
              value: $row.find('[data-cell="username"]').html(),
              type: 'text',
              placeholder: `${window.language.form_username} *`,
              options: [
                'readonly'
              ]
            },
            password: {
              type: 'password',
              placeholder: `${window.language.form_password} *`
            },
            confirm_password: {
              type: 'password',
              placeholder: `${window.language.form_confirm_password} *`
            },
            actions: {
              type: 'button',
              class: 'primary',
              options: [
                {
                  type: 'button',
                  class: 'primary',
                  placeholder: window.language.change
                },
                {
                  type: 'reset',
                  class: 'default',
                  placeholder: window.language.cancel
                }
              ]
            }
          }
        })

        base.updateLanguage(window.language, document.querySelector('#aside'))

        $('#aside').addClass('aside--active')
      }
      else if ($type === SETTINGS.TICKET_ACTIONS.TRANSFER) {
        forms.setHTML({
          id: $row.find('[data-cell="id"]').html(),
          title: window.language.transfer_agent,
          fields: {
            agent: {
              value: $row.find('[data-cell="username"]').html(),
              type: 'text',
              placeholder: `${window.language.form_username} *`,
              options: [
                'readonly'
              ]
            },
            new_parent: {
              type: 'dropdown',
              placeholder: `${window.language.form_new_parent} *`,
              data: base.agents,
            },
            actions: {
              type: 'button',
              class: 'primary',
              options: [
                {
                  type: 'button',
                  class: 'primary',
                  placeholder: window.language.change,
                },
                {
                  type: 'reset',
                  class: 'default',
                  placeholder: window.language.cancel,
                }
              ]
            }
          }
        })

        base.updateLanguage(window.language, document.querySelector('#aside'))

        $('#aside').addClass('aside--active')
      }
    })

    $('.js-form-accounts').on('submit', function (e) {
      e.preventDefault()
      handleSubmit()
    })

    $('body').on('click', '.js-table-more', function () {
      const $dropdown = $(this).prev('.js-table-dropdown')
      $(this).prev('.js-table-dropdown').toggleClass('table__dropdown--show')

      if ($dropdown.hasClass('table__dropdown--show')) {
        $(this).text('Less more')
      }
      else {
        $(this).text('Read more')
      }
    })

